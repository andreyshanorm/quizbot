from aiogram import types, Dispatcher
from aiogram.filters.command import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from db import get_quiz_index, update_quiz_index, save_user_result, show_user_statistics, create_user_name, get_top_rating
from quiz_data import get_question, new_quiz, quiz_data
from aiogram import F


dp = Dispatcher()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–±—ã—Ç–∏–π

def create_buttons(builder):
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    builder.add(types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
    builder.add(types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–æ–≤"))
    builder.add(types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))

def get_reply_keyboard() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    create_buttons(builder)  
    return builder.as_markup(resize_keyboard=True)

async def handle_answer(callback: types.CallbackQuery, is_correct: bool):
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None 
    )
    
    current_question_index = await get_quiz_index(callback.from_user.id)
    if is_correct:
        await callback.message.answer("–í–µ—Ä–Ω–æ!")
        await save_user_result(callback.from_user.id, current_question_index, correct=True)
    else:
        correct_option = quiz_data[current_question_index]['correct_option']
        await callback.message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz_data[current_question_index]['options'][correct_option]}")
        await save_user_result(callback.from_user.id, current_question_index, correct=False)

    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index)

    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        await finish_quiz(callback.message, callback.from_user.id)

@dp.callback_query(F.data == "right_answer") 
async def right_answer(callback: types.CallbackQuery):
    await handle_answer(callback, is_correct=True)

@dp.callback_query(F.data == "wrong_answer") 
async def wrong_answer(callback: types.CallbackQuery):
    await handle_answer(callback, is_correct=False) 

async def finish_quiz(message, user_id):
    await message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=get_reply_keyboard())
    await show_user_statistics(user_id, message)

waiting_for_nickname = {} 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_user
@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") 
@dp.message(Command("create_user"))
async def cmd_create_user(message: types.Message):
    user_id = message.from_user.id
    waiting_for_nickname[user_id] = True
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(lambda message: message.from_user.id in waiting_for_nickname)
async def process_nickname(message: types.Message):
    user_id = message.from_user.id
    nickname = message.text.strip()
    
    if len(nickname) < 3:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    try:
        await create_user_name(user_id, nickname)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=get_reply_keyboard())
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if user_id in waiting_for_nickname:
            del waiting_for_nickname[user_id]

@dp.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É") 
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await new_quiz(message)

@dp.message(Command("start")) 
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    create_buttons(builder)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!\n\n"
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        "- /create_user ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ù–∞–∂–∞—Ç—å ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n"
        "- –ù–∞–∂–∞—Ç—å ¬´–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n"
        "- –ù–∞–∂–∞—Ç—å ¬´–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–æ–≤¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n"
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "- /quiz ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "- /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "- /best - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        reply_markup=builder.as_markup(resize_keyboard=True) 
    )

@dp.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–æ–≤") 
@dp.message(Command("best"))
async def cmd_quiz(message: types.Message):
    best = await get_top_rating()
    if best == 0:
        await message.answer(f"–í –ö–≤–∏–∑–µ –Ω–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞", reply_markup=get_reply_keyboard())
        return
    for index, item in enumerate(best):
        player_place = index + 1
        await message.answer(f"–ú–µ—Å—Ç–æ ‚Ññ{player_place} –∑–∞–Ω–∏–º–∞–µ—Ç {item[0]} —Å–æ —Å—á–µ—Ç–æ–º {item[1]}", reply_markup=get_reply_keyboard())
        if index > 3:
            break
    
    

@dp.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
@dp.message(Command("stats"))
async def cmd_show_stats(message: types.Message):
    user_id = message.from_user.id
    total, correct = await show_user_statistics(user_id, message)
    if total == 0:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.", reply_markup=get_reply_keyboard())
    else:
        await message.answer(f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {total} –≤–æ–ø—Ä–æ—Å–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö {correct} –±—ã–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏.", reply_markup=get_reply_keyboard())